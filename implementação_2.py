# -*- coding: utf-8 -*-
"""IMPLEMENTAÇÃO 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zcMiuOi-GMX4Jja469QY_F3qvxG9WRM8
"""

from itertools import chain, combinations
import os
################FUNCOES#######################

#Fazer as transicoes
def Ligacao_Vazio(Automato,estado):
  for e in Automato.estados:
    if e == estado:
      if len(estado.ligacoes['&']) != 0:
        return True
  return False

#Modelando o nome de cada estado
def Nome(nome):
  aux = '['
  if type(nome) == int:
    aux += str(nome)
  elif type(nome) == list:
    for l in nome:
      aux += str(l) + ', '
    remove = len(aux) - 2
    aux = aux[:remove]
  aux += ']'
  return aux

#Percorre os estados, para verificar ligações com o vazio 
def PegaDestinos(automato,estado,simbolo):
  aux = estado.ligacoes[simbolo]
  x = ''
  for i in aux:
    x += i.nome + ','

  for i in aux:
    if Ligacao_Vazio(automato,i):
      add = PegaDestinos(automato,i,'&')
      x += add
  
  return x  

def format_name(nome):
  return list(nome.replace(',',''))

#Transformando o nome lido em string para, para uma lista  
def string_para_lista(nome):
  nome = list(nome)
  lista = []
  for i in nome:
    if i !=  '[' and i != ']' and i != ',' and i != ' ':
      lista.append(int(i))
  return lista

#Função responsavel por procurar estados
def Procura(automato,nome):
  for i in automato.estados:
    if i.nome == nome:
      return i
#Realizando o conjunto das partes para criar os estados do AFD
def Conjunto_Das_Partes(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

#CLASS responsável por realizar todas as inteções dos automatos, criando as 
#transações mostrando o autômato.

class Automato:
  def __init__(self, estados = 0, inicial=None, finais=None, alfabeto=None):
    self.estados = []
    if type(estados) == list:
      self.qtd = len(estados)
      for n in estados:
        self.estados.append(Estado(str(n)))
    elif type(estados) == int:
      self.qtd = estados
      for n in range(1,estados+1):
        self.estados.append(Estado(str(n)))

    self.inicial = inicial
    if finais == None:
      self.finais = set()
    else:
      self.finais = finais
    self.alfabeto = alfabeto
    self.Criar_Transicoes()

  def Criar_Transicoes(self):
    for i in self.estados:
      for a in self.alfabeto:
        i.ligacoes[a] = []
  def Mostra_Estados(self):
    print("- - - - - - - - - - - - - - - -")
    print("ESTADOS: ",end='')
    i = 0
    for e in self.estados:
      print('q',e.nome,sep='', end = ' ')
      i += 1
      if i < len(self.estados):
        print("|",end=' ')
      else:
        print()
    print("- - - - - - - - - - - - - - - -")

  def Mostra_Automato(self,tipo='afnd'):
    print("- - - - - - - - - - - AUTOMATO - - - - - - - - - - - -")
    print("ALFABETO: ", self.alfabeto)
    self.Mostra_Estados()
    print("ESTADO INICIAL:",end='') 
    if self.inicial:
      print(" q",self.inicial.nome,sep='')
    else:
      print(" NAO DEFINIDO")

    print("- - - - - - - - - - - - - - - -")

    if len(self.finais) != 0:
      if len(self.finais) > 1:
        print("ESTADOS FINAIS: ",end='')
      elif len(self.finais) == 1:
        print("ESTADO FINAL: ",end='')
      i = 0
      for f in self.finais:
        print("q",f.nome, sep='',end='')
        i+= 1
        if i < len(self.finais):
          print(" | ",end='')
        else:
          print()
    else:
      print("ESTADOS FINAIS: NAO DEFINIDOS")

    print("\n- - - - - - - - - - - - - - - -\n")
    
    if tipo == 'afnd':
      print("\nTRANSIÇÕES:\n")
      for e in self.estados:
        print("Estado: q",e.nome,sep='')
        for a in e.ligacoes.keys():
          print("+ ",a," ---> ",end='')
          for i in e.ligacoes[a]:
            print("q",i.nome, sep='',end = ' | ')
          print()
        print("\n- - - - - - - - - - - - - - - -")
    elif tipo == 'afd':
      print("\nTRANSIÇÕES:\n")
      for e in self.estados:
        print("Estado: q",e.nome,sep='')
        for a in e.ligacoes.keys():
          if a != "&" :
            print("+ ",a," ---> ",end='')
            for i in e.ligacoes[a]:
              print("q",i.nome, sep='')
        print("\n- - - - - - - - - - - - - - - -\n")
      
    print("\n- - - - - - - - - - - - - - - - - - - - - - - - - - -\n")

#Class Estado:
class Estado:
  def __init__(self,nome="",inicial=False,final=False,ligacoes={}):
    self.nome = nome
    self.inicial = inicial
    self.final = final
    self.ligacoes = dict() 
  def Mostra_Estado(self):
    #print("ESTADO ATUAL: q", self.nome,sep='')
    #for i in self.ligacoes.keys():
    #  print("LIGACOES: q", i.nome, "->", self.ligacoes[i],sep='')
    print("ESTADO ATUAL: q",self.nome,sep='')
    for a in self.ligacoes.keys():
      print("+ ",a," ---> ",end='')
      for i in self.ligacoes[a]:
       print("q",i.nome, sep='',end = ' | ')
      print()

  def Criar_Ligacoes(self,proximo_estado="",simbolo=""): 
    self.ligacoes[simbolo].append(proximo_estado)

#CRIACAO DO ALFABETO:
print("Digite o alfabeto do autômato AFND de forma continua")
print("Exemplo: Entrada '01'")
a = input()
Alfabeto = set()
for i in a:
  Alfabeto.add(i)
Alfabeto.add("&")
Alfabeto = sorted(Alfabeto)
print("Alfabeto: ",Alfabeto)

#Lendo e definindo a quantidade de estados do AFND
print("Digite a quantidade de estados terá seu automato: ")
tam = int(input())
AFND = Automato(estados=tam,alfabeto=Alfabeto)

#Lendo e definindo os estados iniciais do AFND
AFND.Mostra_Estados()
print("Informe qual dos estados listados acima será o estado inicial:")
confirma = 0
while confirma == 0:  
  valor = input()
  for i in AFND.estados:
    if i.nome == valor[1:]:
      i.inicial = True
      AFND.inicial = i
      confirma = 1
      break
#Lendo e definindo os estados finais do AFND
AFND.Mostra_Estados()
print("Informe qual(is) dos estados listados acima sera(ao) o(s) estado(s) final(is):")
valores = input()
valores = valores.split('q')
if '' in valores:
  indice = valores.index('')
  valores.pop(indice)
for i in valores:
  print("Estado final: q",i,sep='',end='')
  if int(i) <= tam:
    for e in AFND.estados:
      if e.nome == i:
        e.final = True
        AFND.finais.add(e)
    print(" - - - Adicionado !")
  else:
    print(" - - - Invalido! !")

print("\n- - - - - - - - TRANSIÇÕES - - - - - - -\n")
AFND.Mostra_Estados()
#PARA CADA ESTADO
for e in AFND.estados:
  #PARA CADA SIMBOLO DO ALFABETO
  for a in Alfabeto:
    print(" -> Estado q",e.nome," com o simbolo \'",a,"\' vai para qual(is) estado(s)?",sep='')
    quant = input()
    if quant != '':
      quant = quant.split('q')
      if '' in quant:
        indice = quant.index('')
        quant.pop(indice)
      for q in quant:
        index = AFND.estados.index(e)
        for eadd in AFND.estados:
          if eadd.nome == q:
            AFND.estados[index].Criar_Ligacoes(eadd,a)
    e.Mostra_Estado()
    print()
  print("- - - - - - - - - - - - - - - - - - - - - - ")
  
os.system('cls') or None
print("\n--------- MOSTRANDO O AUTÔMATO AFND ---------\n")
AFND.Mostra_Automato()

n_estados = list(range(1,tam+1))
aux = Conjunto_Das_Partes(n_estados)
Novos_estados=[]
print("\n--------- MONTANDO É MOSTRANDO O AUTÔMATO AFD ---------\n")
print("\nEstados do AFD:")
for i in aux:
  Novos_estados.append(str(list(i)))
  print(list(i), end=' | ')
AFD = Automato(Novos_estados,alfabeto=Alfabeto)

#Encontrar inicial do AFD 
n_inicial='[' + AFND.inicial.nome 
if len(AFND.inicial.ligacoes) != 0:
  for i in AFND.inicial.ligacoes['&']:
    n_inicial += ', ' + i.nome
  n_inicial += ']'
  for n in AFD.estados:
    if n.nome == n_inicial:
      n.inicial = True
      AFD.inicial = n
  print("\n\nNOVO ESTADO INICIAL ----> q",n_inicial,sep='')

#Encontrar Finais do AFD
print("\nNOVOS ESTADOS FINAIS ----> ",end='')
for i in AFND.finais:
  for n in AFD.estados:
    if i.nome in n.nome:
      n.final = True
      AFD.finais.add(n)
      print("q",n.nome,sep='',end=' | ')

#GERANDO TRANSICOES DO AFD

for e in AFD.estados:
  if e.nome == '[]':
    for a in Alfabeto:
      if a !=  '&':
        e.Criar_Ligacoes(e,a)
  else:
    nome_lista = string_para_lista(e.nome)
    for a in Alfabeto:
      if a != '&':
        destino = set()
        for l in nome_lista:
          estado = Procura(AFND,str(l))
          destinos = PegaDestinos(AFND,estado,a)
          for d in destinos:
            destino.add(d)

        destino = sorted(destino)
        nome_destino = []
        for d in destino:
          if d != ',' and d != ' ' and d != '[' and d != ']':
            nome_destino.append(int(d))

        aux = Procura(AFD,str(nome_destino))
        e.Criar_Ligacoes(aux,a)
          
print("\n-------- Feito!\n")


AFD.Mostra_Automato('afd')
print("A montagem do Autômato AFD está acima")
print("Pressione alguma tecla para sair\n")
input()